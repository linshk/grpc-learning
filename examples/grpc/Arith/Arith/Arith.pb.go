// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Arith.proto

package Arith

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing two arguments
type Args struct {
	A                    int32    `protobuf:"varint,1,opt,name=A,proto3" json:"A,omitempty"`
	B                    int32    `protobuf:"varint,2,opt,name=B,proto3" json:"B,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Args) Reset()         { *m = Args{} }
func (m *Args) String() string { return proto.CompactTextString(m) }
func (*Args) ProtoMessage()    {}
func (*Args) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89835e6438b55cb, []int{0}
}

func (m *Args) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Args.Unmarshal(m, b)
}
func (m *Args) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Args.Marshal(b, m, deterministic)
}
func (m *Args) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Args.Merge(m, src)
}
func (m *Args) XXX_Size() int {
	return xxx_messageInfo_Args.Size(m)
}
func (m *Args) XXX_DiscardUnknown() {
	xxx_messageInfo_Args.DiscardUnknown(m)
}

var xxx_messageInfo_Args proto.InternalMessageInfo

func (m *Args) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *Args) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Production struct {
	Value                int32    `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Production) Reset()         { *m = Production{} }
func (m *Production) String() string { return proto.CompactTextString(m) }
func (*Production) ProtoMessage()    {}
func (*Production) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89835e6438b55cb, []int{1}
}

func (m *Production) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Production.Unmarshal(m, b)
}
func (m *Production) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Production.Marshal(b, m, deterministic)
}
func (m *Production) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Production.Merge(m, src)
}
func (m *Production) XXX_Size() int {
	return xxx_messageInfo_Production.Size(m)
}
func (m *Production) XXX_DiscardUnknown() {
	xxx_messageInfo_Production.DiscardUnknown(m)
}

var xxx_messageInfo_Production proto.InternalMessageInfo

func (m *Production) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// The response message containing the divide result
type Quotient struct {
	Quo                  int32    `protobuf:"varint,1,opt,name=Quo,proto3" json:"Quo,omitempty"`
	Rem                  int32    `protobuf:"varint,2,opt,name=Rem,proto3" json:"Rem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quotient) Reset()         { *m = Quotient{} }
func (m *Quotient) String() string { return proto.CompactTextString(m) }
func (*Quotient) ProtoMessage()    {}
func (*Quotient) Descriptor() ([]byte, []int) {
	return fileDescriptor_b89835e6438b55cb, []int{2}
}

func (m *Quotient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quotient.Unmarshal(m, b)
}
func (m *Quotient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quotient.Marshal(b, m, deterministic)
}
func (m *Quotient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quotient.Merge(m, src)
}
func (m *Quotient) XXX_Size() int {
	return xxx_messageInfo_Quotient.Size(m)
}
func (m *Quotient) XXX_DiscardUnknown() {
	xxx_messageInfo_Quotient.DiscardUnknown(m)
}

var xxx_messageInfo_Quotient proto.InternalMessageInfo

func (m *Quotient) GetQuo() int32 {
	if m != nil {
		return m.Quo
	}
	return 0
}

func (m *Quotient) GetRem() int32 {
	if m != nil {
		return m.Rem
	}
	return 0
}

func init() {
	proto.RegisterType((*Args)(nil), "Arith.Args")
	proto.RegisterType((*Production)(nil), "Arith.Production")
	proto.RegisterType((*Quotient)(nil), "Arith.Quotient")
}

func init() { proto.RegisterFile("Arith.proto", fileDescriptor_b89835e6438b55cb) }

var fileDescriptor_b89835e6438b55cb = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x40, 0x1b, 0x75, 0x4b, 0x99, 0x0a, 0xd5, 0xe0, 0xa1, 0xe8, 0x45, 0x72, 0xea, 0x41, 0x82,
	0xe8, 0x2f, 0x48, 0xf0, 0xe0, 0x45, 0xd8, 0xf6, 0xa0, 0x47, 0xa9, 0xdd, 0xb0, 0x1b, 0xc8, 0xee,
	0x84, 0x6c, 0xe2, 0xc7, 0xbf, 0x97, 0xd9, 0x44, 0xa4, 0xb7, 0xf7, 0x92, 0x21, 0x79, 0x0c, 0x2c,
	0x55, 0xb0, 0xb1, 0x93, 0x3e, 0x60, 0x44, 0x5e, 0x4d, 0x22, 0x04, 0x9c, 0xa9, 0xd0, 0x8e, 0xfc,
	0x1c, 0x98, 0x5a, 0xb3, 0x5b, 0xb6, 0xa9, 0x76, 0x4c, 0x91, 0xe9, 0xf5, 0x49, 0x36, 0x2d, 0x04,
	0x40, 0x1d, 0xb0, 0x49, 0x87, 0x68, 0x71, 0xe0, 0x57, 0x50, 0xbd, 0xee, 0x5d, 0x32, 0x65, 0x3a,
	0x8b, 0x90, 0xb0, 0xd8, 0x26, 0x8c, 0xd6, 0x0c, 0x91, 0x5f, 0xc0, 0xe9, 0x36, 0x61, 0xb9, 0x27,
	0xa4, 0x93, 0x9d, 0xe9, 0xcb, 0x8b, 0x84, 0x0f, 0xef, 0x90, 0x03, 0xf8, 0x1d, 0x2c, 0x5e, 0x92,
	0x8b, 0xd6, 0xbb, 0x1f, 0xbe, 0x94, 0xb9, 0x90, 0x8a, 0xae, 0x2f, 0x8b, 0xfc, 0x7f, 0x2d, 0x66,
	0x7c, 0x03, 0xf3, 0x27, 0xfb, 0x69, 0x1b, 0x73, 0x3c, 0xbb, 0x2a, 0xf2, 0x97, 0x20, 0x66, 0xfa,
	0x1e, 0x6e, 0x2c, 0xca, 0x36, 0xf8, 0x83, 0x34, 0xdf, 0xfb, 0xde, 0x3b, 0x33, 0xca, 0xce, 0x38,
	0x87, 0x5f, 0x18, 0x5c, 0xa3, 0x57, 0xcf, 0xc4, 0x6f, 0xc4, 0x35, 0xed, 0xa3, 0x66, 0x1f, 0xf3,
	0x69, 0x31, 0x8f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xd4, 0x86, 0x4e, 0x27, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArithClient is the client API for Arith service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArithClient interface {
	Multiply(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Production, error)
	Divide(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Quotient, error)
}

type arithClient struct {
	cc *grpc.ClientConn
}

func NewArithClient(cc *grpc.ClientConn) ArithClient {
	return &arithClient{cc}
}

func (c *arithClient) Multiply(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Production, error) {
	out := new(Production)
	err := c.cc.Invoke(ctx, "/Arith.Arith/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arithClient) Divide(ctx context.Context, in *Args, opts ...grpc.CallOption) (*Quotient, error) {
	out := new(Quotient)
	err := c.cc.Invoke(ctx, "/Arith.Arith/Divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArithServer is the server API for Arith service.
type ArithServer interface {
	Multiply(context.Context, *Args) (*Production, error)
	Divide(context.Context, *Args) (*Quotient, error)
}

func RegisterArithServer(s *grpc.Server, srv ArithServer) {
	s.RegisterService(&_Arith_serviceDesc, srv)
}

func _Arith_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Arith.Arith/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServer).Multiply(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Arith_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArithServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Arith.Arith/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArithServer).Divide(ctx, req.(*Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _Arith_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Arith.Arith",
	HandlerType: (*ArithServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _Arith_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _Arith_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Arith.proto",
}
